fullnameOverride: cilium-stack
nameOverride: cilium-stack

global:
  replicas: 1
  # -- Definitions to set up nginx resolver
  dnsService: kube-dns
  dnsNamespace: kube-system
  clusterDomain: cluster.local
  priorityClassName: system-cluster-critical

features:
  nodeEncryption: false
  bgp: false

logLevel: info

tags:
  logging: true
  monitoring: true
  distributed: true
# Cilium
cilium:
  nameOverride: cilium
  fullnameOverride: cilium
  enabled: true
  kubeProxyReplacement: strict
  tunnel: vxlan
  prometheus:
    enabled: true
  clustermesh:
    config:
      enabled: false
  ingressController:
    enabled: true
    default: true
    loadbalancerMode: shared
    service:
      type: LoadBalancer
      loadBalancerIP: 192.168.1.99
      loadBalancerClass: cilium
      insecureNodePort: 80
      secureNodePort : 443
      annotations:
        io.cilium/lb-ipam-ips: "72.216.61.243,192.168.1.99,1192.168.1.98"
  cluster:
    name: kubernetes
    id: 0
  encryption:
    nodeEncryption: false
  operator:
    replicas: 1
    prometheus:
      enabled: '{{ include "prometheus.enabled" .}}'
  bgp:
    enabled: false
    announce:
      loadbalancerIP: true
      podCIDR: true
  bgpControlPlane:
    enabled: false
  bpf:
    masquerade: true
    lbExternalClusterIP: true
  externalIPs:
    enabled: true
  nodePort:
    enabled: true
  hostServices:
    enabled: true
  hostPort:
    enabled: true
  hubble:
    enabled: true
    metrics:
      enabled: false
    ui:
      enabled: true
    relay:
      enabled: true
      replicas: 1
  ipam:
    mode: kubernetes
  loadBalancer:
    l7:
      backend: envoy
  isDefault: false
  url: 'http://{{ include "prometheus.fullname" .}}:{{ .Values.prometheus.server.service.servicePort }}{{ .Values.prometheus.server.prefixURL }}'
  datasource:
    jsonData: "{}"
# Cert Manager
cert-manager:
  fullnameOverride: cert-manager
  nameOverride: cert-manager
  installCRDs: true
  webhook:
    serviceType: ClusterIP
  resources:
    requests:
      cpu: 10m
      memory: 32Mi
# Local Path Provisioner
local-path-provisioner:
  enabled: true
  isDefault: false
  fullnameOverride: local-provisioner
  nameOverride: local-provisioner
  storageClass:
    create: true
    name: local-path
    defaultClass: true
    reclaimPolicy: Delete
# Prometheus
prometheus:
  enabled: true
  isDefault: false
  fullnameOverride: prometheus
  nameOverride: prometheus
  fullname: '{{ .Release.Name }}-prometheus'
  server:
    prefixURL: /
    service:
      servicePort: 9090
      type: ClusterIP
  url: 'http://{{ include "prometheus.fullname" .}}:{{ .Values.prometheus.server.service.servicePort }}{{ .Values.prometheus.server.prefixURL }}'
  alertmanager:
    fullnameOverride: alertmanager
    nameOverride: alertmanager
  kube-state-metrics:
    enabled: true
    fullnameOverride: kube-state-metrics
    nameOverride: kube-state-metrics
  prometheus-node-exporter:
    enabled: false
    fullnameOverride: node-exporter
    nameOverride: node-exporter
  datasource:
    jsonData: "{}"
# Prometheus Operator Admission Webhook
prometheus-operator-admission-webhook:
  fullnameOverride: prometheus-operator
  nameOverride: prometheus-operator
# Grafana
grafana:
  enabled: true
  fullnameOverride: grafana
  nameOverride: grafana
# Fluent Bit
fluent-bit:
  enabled: true
  fullnameOverride: fluent-bit
  nameOverride: fluent-bit
  config:
    service: |
      [SERVICE]
          Daemon Off
          Flush {{ .Values.flush }}
          Log_Level {{ .Values.logLevel }}
          Parsers_File parsers.conf
          Parsers_File custom_parsers.conf
          HTTP_Server On
          HTTP_Listen 0.0.0.0
          HTTP_Port {{ .Values.metricsPort }}
          Health_Check On

    filters: |
      [FILTER]
          Name kubernetes
          Match kube.*
          Merge_Log On
          Keep_Log Off
          K8S-Logging.Parser On
          K8S-Logging.Exclude On

    ## https://docs.fluentbit.io/manual/pipeline/inputs
    inputs: |
      [INPUT]
          Name tail
          Path /var/log/containers/*.log
          multiline.parser docker, cri
          Tag kube.*
          Mem_Buf_Limit 5MB
          Skip_Long_Lines On

      [INPUT]
          Name systemd
          Tag host.*
          Systemd_Filter _SYSTEMD_UNIT=kubelet.service
          Read_From_Tail On

      [INPUT]
          name            node_exporter_metrics
          tag             node_metrics
          scrape_interval 2

      [INPUT]
          Name                 event_type
          Type                 traces

    outputs: |
      [OUTPUT]
        Name            prometheus_remote_write
        Match           *
        Host            mimir.{{ include "stack.domain" .}}
        uri             /api/v1/push
        port            443

      [OUTPUT]
          name                   loki
          match                  *
          Host                   loki.{{ include "stack.domain" .}}
          labels                 job=fluentbit, $sub['stream']
          auto_kubernetes_labels on

      [OUTPUT]
          Name                 opentelemetry
          Match                *
          Host                 tempo.{{ include "stack.domain" .}}
          Port                 443
          Metrics_uri          /api/v1/push
          Logs_uri             /api/v1/push
          Traces_uri           /api/v1/push
          Log_response_payload True
          Tls                  On
          Tls.verify           Off
          # add user-defined labels
          add_label            app fluent-bit
          add_label            color blue
  dashboards:
    enabled: true
# Minio
minio:
  enabled: true
  fullnameOverride: minio
  nameOverride: minio
  replicas: '{{ .Values.global.replicas }}'
  mode: standalone
  rootUser: minio
  rootPassword: minio123
  logLevel: info
  serverPort: 3100
  buckets:
    - name: loki-tsdb
      policy: none
      purge: false
    - name: loki-ruler
      policy: none
      purge: false
    - name: mimir-tsdb
      policy: none
      purge: false
    - name: mimir-ruler
      policy: none
      purge: false
# Loki
loki:
  enabled: true
  isDefault: true
  fullnameOverride: loki
  nameOverride: loki
  url: 'http://{{(include "loki.serviceName" .)}}:{{ .Values.loki.service.port }}'
  singleBinary:
    replicas: 1
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  datasource:
    jsonData: "{}"
    uid: ""
# Mimir
mimir:
  enabled: true
  fullnameOverride: mimir
  nameOverride: mimir
  nginx:
    enabled: false
  alertmanager:
    enabled: false
  minio:
    enabled: false
# Tempo
tempo:
  enabled: true
  fullnameOverride: tempo
  nameOverride: tempo
  storage:
    trace:
      bucket: tempo
      backend: '{{ include "stack.storage" .}}'
      s3:
        access_key: 'grafana-tempo'
        secret_key: '{{ .Values.minio.rootPassword }}'
        bucket: 'tempo'
        endpoint: '{{ include "minio.endpoint" }}'
        insecure: true
  metricsGenerator:
    remoteWriteUrl: 'http://{{ include "mimir.fullname" .}}:{{ .Values.mimir.serverPort }}/api/v1/push'
